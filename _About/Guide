Part 1: JSX (JavaScript XML)

1.1 What is JSX?
    -JSX stands for JavaScript XML. It is a syntax extension for JavaScript that looks like
    HTML but is used inside React components to define the UI structure.

Why JSX?
    -JSX allows you to write HTML-like code within JavaScript, making the structure of your
    components easier to understand.
    -JSX is not valid JavaScript or HTML. Behind the scenes, React transpiles (or converts)
    JSX into pure JavaScript using tools like Babel.

1.2 How JSX Differs from Regular HTML and JavaScript
    -JSX (React): Combines the structure of HTML with the power of JavaScript.
    -JavaScript: Handles logic, state management, event handling, and API calls.
    -HTML: The static structure that represents web content.

Example of JSX:
    const element = <h1>Hello, world!</h1>;
        The above code looks like HTML, but it's JSX. React turns
        this into a JavaScript function call that renders the
        HTML-like structure into the DOM.

        Behind the scenes, this JSX is converted into this:
            const element = React.createElement('h1', null, 'Hello, world!');

1.3 Differences Between JSX and HTML
    -class vs. className:
        In JSX, you must use className instead of class, because class is a reserved keyword in JavaScript.
            <div className="my-class"></div>  // JSX
    -Self-closing Tags:
        JSX requires self-closing tags for elements that donâ€™t have children:
            <img src="image.png" />  // JSX (self-closing)
    -JSX Allows Expressions:
        You can embed any JavaScript expression inside curly braces {}:
            const name = "John";
            const element = <h1>Hello, {name}!</h1>;  // Embeds JS expression

1.4 How to Identify JSX
    -JSX elements always start with a capital letter if they refer to a custom React component.
    -JSX often includes HTML-like syntax within JavaScript code.
    -JSX expressions are enclosed in {} to use dynamic content.

JSX Example (from your code):
    <form onSubmit={handleSubmit} className="students-form">
      <div className="form-group">
        <label htmlFor="studentName">Enter Student Name:</label>
        <input
          type="text"
          id="studentName"
          value={studentName}
          onChange={(e) => setStudentName(e.target.value)}
          placeholder="Enter student name"
          required
        />
      </div>
    </form>
    JSX Syntax: It's inside JavaScript (React component) but looks like HTML.
    Dynamic Content: value={studentName} dynamically binds the value to studentName (state variable).

---------------------------------------------------------------------------------------------------

Part 2: React Functional Components and Hooks

2.1 What are Functional Components?
    React components can be written in two ways:
    -Class components: Older way, using class syntax.
    -Functional components: Modern, simple functions that can use hooks for state and lifecycle methods.

    A functional component is a plain JavaScript function that returns JSX (UI).

    Example of Functional Component:
        function Welcome(props) {
          return <h1>Hello, {props.name}!</h1>;
        }

        In your code, Students is a functional component:
            function Students() {
              // Component logic here
              return (
                <div>
                  {/* JSX here */}
                </div>
              );
            }

2.2 React Hooks
Before React Hooks, class components were needed for features like state and lifecycle methods.
Now, hooks allow functional components to be stateful and reactive.

a. useState Hook
    useState is a hook that allows you to add state to a functional component.

        const [state, setState] = useState(initialState);
            // state: Holds the current state value.
            // setState: Function to update the state.
            // useState(initialValue): Initializes state with initialValue.

    Example from your code:
        const [students, setStudents] = useState([]);
            // Initialize students with an empty array.
            // students: Holds the array of students.
            // setStudents: Function to update the array of students.

b. useEffect Hook
    useEffect is used to handle side effects in React components. Side effects include things like
    data fetching, subscriptions, or manually changing the DOM.

        useEffect(() => {
          // Effect logic (e.g., fetch data)
        }, [dependencies]); // Optional array of dependencies.

    Example from your code:
        useEffect(() => {
          fetchClassCategories();
          fetchStudents();
        }, []);  // Empty array means it runs only once, on component mount.
            // Fetches data when the component is mounted and doesn't run
            again unless dependencies change.

---------------------------------------------------------------------------------------------------

Part 3: Fetch API for Data Fetching

The Fetch API is a modern way to make HTTP requests in JavaScript. It returns a promise,
so you can handle asynchronous operations using .then() or async/await.

a. GET Request (Fetching Data)
    To get data from a server (like fetching students or class categories):
        fetch('http://localhost:8080/api/students', { method: 'GET' })
          .then(response => response.json())  // Converts the response to JSON
          .then(data => {
            setStudents(data);  // Updates state with the fetched data
          })
          .catch(error => console.error('Error fetching students:', error));

    Key Points:
        - fetch() sends a request to the specified URL.
        - The response is converted to JSON with response.json().
        - The state (students) is updated with the received data using setStudents.

b. POST Request (Adding Data)
   To send data (like adding a new student), you can use a POST request with the fetch API:
        fetch('http://localhost:8080/api/students', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },  // Specify JSON content
          body: JSON.stringify(student),  // Send the student data
        })
          .then(response => response.json())  // Handle the response
          .then(data => {
            setStudents([...students, data]);  // Add the new student to the list
          })
          .catch(error => console.error('Error adding student:', error));

    Key Points:
        - Method: POST sends data to the server.
        - Headers: Specifies that the data format is JSON.
        - Body: Data is sent as a JSON string using JSON.stringify().

---------------------------------------------------------------------------------------------------

Part 4: Event Handling

React handles events similarly to HTML, but with some differences:
    - Events are written in camelCase (e.g., onClick, onSubmit).
    - You use functions to handle events.

Example from your code:
    <form onSubmit={handleSubmit}>  // Handles form submission.

    const handleSubmit = (e) => {
      e.preventDefault();  // Prevents the form from reloading the page.
      // Additional logic to handle form submission.
    };

    In React, instead of using attributes like onclick="myFunction()", you attach event
    handlers directly in JSX using {}.

---------------------------------------------------------------------------------------------------

Part 5: Mapping and Rendering Lists

In React, you can render lists dynamically using the map() function,
which is a common JavaScript array method:

    {students.map((student) => (
      <li key={student.id}>{student.name}</li>
    ))}

    Key Points:
        - students.map() iterates over the students array.
        - For each student, a <li> element is returned.
        - The key={student.id} uniquely identifies each list item
          (React requires this for performance optimization).

---------------------------------------------------------------------------------------------------

Part 6: Controlled Components

A controlled component is an input element whose value is controlled by React's state.
The component's state determines the value, and any change to the input updates the state.

Example from your code:
    <input
      type="text"
      value={studentName}
      onChange={(e) => setStudentName(e.target.value)}  // Updates state when user types
    />

    Key Points:
        - value={studentName}: The value of the input is controlled by studentName (state).
        - onChange: Whenever the input changes, setStudentName updates the state with the new value.

    This ensures that your UI (the input field) is always in sync with your component's state.

---------------------------------------------------------------------------------------------------

Part 7: Loading State

What is a Loading State?
In web applications, a loading state is used to show users that data is being fetched or processed.
It's important because:

    - User Experience: It informs users that something is happening in the background and prevents them
      from thinking that the application is stuck or broken.
    - Visual Feedback: It provides visual feedback to users so they know that their request is being handled.

How to Implement a Loading State:
To implement a loading state, you generally follow these steps:

1. Create State Variables: You need a state variable to track whether data is currently being loaded.
2. Set Loading State Before Fetching Data: Update the loading state to true before starting the data fetch.
3. Reset Loading State After Data is Fetched: Once the data is fetched and processed, update the loading state to false.
4. Display a Loading Indicator: Show a spinner, loading text, or some other indicator when the loading state is true.

Example:
    useEffect(() => {
      setLoading(true); // Set loading to true before starting fetch requests.

      // Fetch students
      fetch('/api/students')
        .then(response => response.json())
        .then(data => {
          setStudents(data);
          // Continue fetching other data while keeping loading true.
          return fetch('/api/courses');
        })
        .then(response => response.json())
        .then(data => {
          setCourses(data);
          // Continue fetching grades while keeping loading true.
          return fetch('/api/grades');
        })
        .then(response => response.json())
        .then(data => {
          setGrades(data);
          setLoading(false); // Set loading to false once all data is fetched.
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          setLoading(false); // Set loading to false if thereâ€™s an error.
        });
    }, []);

Why Chain Fetches?
In the provided code, each fetch call is dependent on the previous one. If you want them
to run in parallel (not waiting for one to finish before starting the next),
you can use Promise.all:

Example of Parallel Fetching:
    useEffect(() => {
      setLoading(true);

      // Fetch all data in parallel.
      Promise.all([
        fetch('/api/students').then(response => response.json()),
        fetch('/api/courses').then(response => response.json()),
        fetch('/api/grades').then(response => response.json())
      ])
        .then(([studentsData, coursesData, gradesData]) => {
          setStudents(studentsData);
          setCourses(coursesData);
          setGrades(gradesData);
          setLoading(false); // Set loading to false once all data is fetched.
        })
        .catch(error => {
          console.error('Error fetching data:', error);
          setLoading(false); // Set loading to false if thereâ€™s an error.
        });
    }, []);

---------------------------------------------------------------------------------------------------

Part 8: Ports

Backend,
Port 8080,
Used for backend services (Spring Boot).
Command: './mvnw spring-boot:run' or 'mvn spring-boot:run' from the project's root directory.
Handles data processing, business logic, and API requests.

Frontend,
Port 3000,
Used for frontend development (React).
Command to start this server: 'npm start' from the frontend directory.
Interacts with backend by sending requests (API calls) and displaying the data to users.

---------------------------------------------------------------------------------------------------

Part 9: React Router and Navigation
React Router is a tool that helps you manage different pages in a React app without
having to reload the whole page. It lets you set up links that users can click to
navigate between different views, like moving from a home page to a dashboard. With
React Router, you can define specific paths for each part of your app and load the
right content when users visit those paths. This way, your app feels faster and
smoother, making it easier for users to explore different sections.

In your project, you are using React Router to handle navigation between different pages.
React Router is a popular library that lets you manage navigation and URL routing in your
single-page application (SPA).

Key Concepts:
-----
1. BrowserRouter: Wraps your entire app to enable React Router functionality.
        import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
                    // This allows you to define multiple routes for different pages in your app.
-----
2. Routes: Specifies which component to render based on the URL.
        <Routes>
           <Route path="/login" element={<Login />} />
           <Route path="/manage-students" element={<Students />} />
        </Routes>
                    // Route: Defines individual paths and maps them to components.
                        For example, /login renders the Login component.
-----
3. Link Component: Replaces traditional anchor (<a>) tags for navigation to avoid full-page reloads.
        <Link to="/manage-courses">Manage Courses</Link>

---------------------------------------------------------------------------------------------------

Part 10: Forms and State Management in Login

The `Login` component demonstrates how to effectively manage forms and their state in React.

1. **Using `useState` for Form Inputs**:
   - The `useState` hook is utilized to create state variables for the form fields,
       specifically `username` and `password`. This allows you to capture and maintain
       the current values as the user types.

2. **Handling Form Submission**:
   - The `handleLogin` function is triggered upon form submission.
       It prevents the default behavior of the form (which would
       typically refresh the page) using `e.preventDefault()`.
   - The function checks the input values against predefined credentials.
       If they match, it navigates the user to the Admin Dashboard; otherwise,
       it sets an error message to inform the user of invalid credentials.

3. **Dynamic Input Handling**:
   - Each input field has an `onChange` event handler that updates the corresponding state
       variable (`setUsername` and `setPassword`). This ensures that the state reflects the
       current input at all times, allowing for real-time feedback in the UI.

4. **Displaying Error Messages**:
   - If the user enters incorrect credentials, the component displays
       an error message using conditional rendering. This feedback helps
       guide the user in correcting their input.

5. **Example Code**:
        import React, { useState } from 'react'; // Importing React and useState hook for managing state
        import { useNavigate } from 'react-router-dom'; // Importing useNavigate for programmatic navigation
        import './Login.css'; // Importing CSS for styling the component

        function Login() {
          // State variables for storing input values and error message
          const [username, setUsername] = useState(''); // Initializing username state
          const [password, setPassword] = useState(''); // Initializing password state
          const [error, setError] = useState(''); // Initializing error state
          const navigate = useNavigate(); // Hook to navigate programmatically

          // Function to handle form submission
          const handleLogin = (e) => {
            e.preventDefault(); // Preventing default form submission behavior
            // Checking if the entered credentials match predefined values
            if (username === 'admin' && password === 'pass') {
              navigate('/admin-dashboard'); // Navigating to the Admin Dashboard on successful login
            } else {
              setError('Invalid credentials. Please try again.'); // Setting error message for invalid login
            }
          };

          return (
            <div className="login-container"> {/* Container for the login form */}
              <h2>Login</h2> {/* Header for the login form */}
              <form onSubmit={handleLogin}> {/* Form that triggers handleLogin on submission */}
                <div>
                  <label>Username:</label> {/* Label for username input */}
                  <input
                    type="text" // Input type for text
                    value={username} // Binding input value to username state
                    onChange={(e) => setUsername(e.target.value)} // Updating username state on input change
                    required // Making this field mandatory
                  />
                </div>
                <div>
                  <label>Password:</label> {/* Label for password input */}
                  <input
                    type="password" // Input type for password (hidden input)
                    value={password} // Binding input value to password state
                    onChange={(e) => setPassword(e.target.value)} // Updating password state on input change
                    required // Making this field mandatory
                  />
                </div>
                <button type="submit">Login</button> {/* Button to submit the form */}
                {error && <p className="error-message">{error}</p>} {/* Conditional rendering of error message */}
              </form>
            </div>
          );
        }

        export default Login; // Exporting the Login component for use in other parts of the application